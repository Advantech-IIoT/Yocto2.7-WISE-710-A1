From fb2c53f194e00a39e0163340eeafa58f501bb238 Mon Sep 17 00:00:00 2001
From: Qing <cnj1990@sina.com.cn>
Date: Wed, 30 Jun 2021 14:20:19 +0800
Subject: [PATCH] update rtc-rx8010

---
 drivers/rtc/rtc-rx8010.c | 82 ++++++++++++++++++++++++++++------------
 1 file changed, 57 insertions(+), 25 deletions(-)

diff --git a/drivers/rtc/rtc-rx8010.c b/drivers/rtc/rtc-rx8010.c
index 7ddc22eb5b0f..4ce558907160 100644
--- a/drivers/rtc/rtc-rx8010.c
+++ b/drivers/rtc/rtc-rx8010.c
@@ -24,6 +24,7 @@
 #define RX8010_MDAY    0x14
 #define RX8010_MONTH   0x15
 #define RX8010_YEAR    0x16
+#define RX8010_YEAR    0x16
 #define RX8010_RESV17  0x17
 #define RX8010_ALMIN   0x18
 #define RX8010_ALHOUR  0x19
@@ -126,7 +127,7 @@ static int rx8010_get_time(struct device *dev, struct rtc_time *dt)
 	}
 
 	err = i2c_smbus_read_i2c_block_data(rx8010->client, RX8010_SEC,
-					    7, date);
+			7, date);
 	if (err != 7)
 		return err < 0 ? err : -EIO;
 
@@ -138,7 +139,7 @@ static int rx8010_get_time(struct device *dev, struct rtc_time *dt)
 	dt->tm_year = bcd2bin(date[RX8010_YEAR - RX8010_SEC]) + 100;
 	dt->tm_wday = ffs(date[RX8010_WDAY - RX8010_SEC] & 0x7f);
 
-	return 0;
+	return rtc_valid_tm(dt);
 }
 
 static int rx8010_set_time(struct device *dev, struct rtc_time *dt)
@@ -157,7 +158,7 @@ static int rx8010_set_time(struct device *dev, struct rtc_time *dt)
 		return ctrl;
 	rx8010->ctrlreg = ctrl | RX8010_CTRL_STOP;
 	ret = i2c_smbus_write_byte_data(rx8010->client, RX8010_CTRL,
-					rx8010->ctrlreg);
+			rx8010->ctrlreg);
 	if (ret < 0)
 		return ret;
 
@@ -170,7 +171,7 @@ static int rx8010_set_time(struct device *dev, struct rtc_time *dt)
 	date[RX8010_WDAY - RX8010_SEC] = bin2bcd(1 << dt->tm_wday);
 
 	ret = i2c_smbus_write_i2c_block_data(rx8010->client,
-					     RX8010_SEC, 7, date);
+			RX8010_SEC, 7, date);
 	if (ret < 0)
 		return ret;
 
@@ -180,7 +181,7 @@ static int rx8010_set_time(struct device *dev, struct rtc_time *dt)
 		return ctrl;
 	rx8010->ctrlreg = ctrl & ~RX8010_CTRL_STOP;
 	ret = i2c_smbus_write_byte_data(rx8010->client, RX8010_CTRL,
-					rx8010->ctrlreg);
+			rx8010->ctrlreg);
 	if (ret < 0)
 		return ret;
 
@@ -191,7 +192,7 @@ static int rx8010_set_time(struct device *dev, struct rtc_time *dt)
 
 	if (flagreg & RX8010_FLAG_VLF)
 		ret = i2c_smbus_write_byte_data(rx8010->client, RX8010_FLAG,
-						flagreg & ~RX8010_FLAG_VLF);
+				flagreg & ~RX8010_FLAG_VLF);
 
 	return 0;
 }
@@ -202,6 +203,16 @@ static int rx8010_init_client(struct i2c_client *client)
 	u8 ctrl[2];
 	int need_clear = 0, err = 0;
 
+	u8 flag;
+
+	flag = i2c_smbus_read_byte_data(client, RX8010_FLAG);
+	if (err < 0)
+		return err;
+
+	flag &= ~(RX8010_FLAG_VLF);
+	err = i2c_smbus_write_byte_data(client, RX8010_FLAG, flag);
+
+
 	/* Initialize reserved registers as specified in datasheet */
 	err = i2c_smbus_write_byte_data(client, RX8010_RESV17, 0xD8);
 	if (err < 0)
@@ -220,7 +231,7 @@ static int rx8010_init_client(struct i2c_client *client)
 		return err;
 
 	err = i2c_smbus_read_i2c_block_data(rx8010->client, RX8010_FLAG,
-					    2, ctrl);
+			2, ctrl);
 	if (err != 2)
 		return err < 0 ? err : -EIO;
 
@@ -246,8 +257,8 @@ static int rx8010_init_client(struct i2c_client *client)
 	}
 
 	rx8010->ctrlreg = (ctrl[1] & ~RX8010_CTRL_TEST);
-
-	return 0;
+           
+	return err;
 }
 
 static int rx8010_read_alarm(struct device *dev, struct rtc_wkalrm *t)
@@ -276,7 +287,7 @@ static int rx8010_read_alarm(struct device *dev, struct rtc_wkalrm *t)
 	t->enabled = !!(rx8010->ctrlreg & RX8010_CTRL_AIE);
 	t->pending = (flagreg & RX8010_FLAG_AF) && t->enabled;
 
-	return 0;
+	return err;
 }
 
 static int rx8010_set_alarm(struct device *dev, struct rtc_wkalrm *t)
@@ -295,7 +306,7 @@ static int rx8010_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 	if (rx8010->ctrlreg & (RX8010_CTRL_AIE | RX8010_CTRL_UIE)) {
 		rx8010->ctrlreg &= ~(RX8010_CTRL_AIE | RX8010_CTRL_UIE);
 		err = i2c_smbus_write_byte_data(rx8010->client, RX8010_CTRL,
-						rx8010->ctrlreg);
+				rx8010->ctrlreg);
 		if (err < 0) {
 			return err;
 		}
@@ -311,7 +322,7 @@ static int rx8010_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 	alarmvals[2] = bin2bcd(t->time.tm_mday);
 
 	err = i2c_smbus_write_i2c_block_data(rx8010->client, RX8010_ALMIN,
-					     2, alarmvals);
+			2, alarmvals);
 	if (err < 0)
 		return err;
 
@@ -328,7 +339,7 @@ static int rx8010_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 		alarmvals[2] |= RX8010_ALARM_AE;
 
 	err = i2c_smbus_write_byte_data(rx8010->client, RX8010_ALWDAY,
-					alarmvals[2]);
+			alarmvals[2]);
 	if (err < 0)
 		return err;
 
@@ -340,7 +351,7 @@ static int rx8010_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 				(RX8010_CTRL_AIE | RX8010_CTRL_UIE);
 
 		err = i2c_smbus_write_byte_data(rx8010->client, RX8010_CTRL,
-						rx8010->ctrlreg);
+				rx8010->ctrlreg);
 		if (err < 0)
 			return err;
 	}
@@ -349,7 +360,7 @@ static int rx8010_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 }
 
 static int rx8010_alarm_irq_enable(struct device *dev,
-				   unsigned int enabled)
+		unsigned int enabled)
 {
 	struct i2c_client *client = to_i2c_client(dev);
 	struct rx8010_data *rx8010 = dev_get_drvdata(dev);
@@ -383,7 +394,7 @@ static int rx8010_alarm_irq_enable(struct device *dev,
 	if (ctrl != rx8010->ctrlreg) {
 		rx8010->ctrlreg = ctrl;
 		err = i2c_smbus_write_byte_data(rx8010->client, RX8010_CTRL,
-						rx8010->ctrlreg);
+				rx8010->ctrlreg);
 		if (err < 0)
 			return err;
 	}
@@ -435,20 +446,23 @@ static struct rtc_class_ops rx8010_rtc_ops = {
 };
 
 static int rx8010_probe(struct i2c_client *client,
-			const struct i2c_device_id *id)
+		const struct i2c_device_id *id)
 {
 	struct i2c_adapter *adapter = to_i2c_adapter(client->dev.parent);
 	struct rx8010_data *rx8010;
 	int err = 0;
 
+	/*test*/
+	u8 year;
+
 	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA
-		| I2C_FUNC_SMBUS_I2C_BLOCK)) {
+				| I2C_FUNC_SMBUS_I2C_BLOCK)) {
 		dev_err(&adapter->dev, "doesn't support required functionality\n");
 		return -EIO;
 	}
 
 	rx8010 = devm_kzalloc(&client->dev, sizeof(struct rx8010_data),
-			      GFP_KERNEL);
+			GFP_KERNEL);
 	if (!rx8010)
 		return -ENOMEM;
 
@@ -462,9 +476,9 @@ static int rx8010_probe(struct i2c_client *client,
 	if (client->irq > 0) {
 		dev_info(&client->dev, "IRQ %d supplied\n", client->irq);
 		err = devm_request_threaded_irq(&client->dev, client->irq, NULL,
-						rx8010_irq_1_handler,
-						IRQF_TRIGGER_LOW | IRQF_ONESHOT,
-						"rx8010", client);
+				rx8010_irq_1_handler,
+				IRQF_TRIGGER_LOW | IRQF_ONESHOT,
+				"rx8010", client);
 
 		if (err) {
 			dev_err(&client->dev, "unable to request IRQ\n");
@@ -476,8 +490,14 @@ static int rx8010_probe(struct i2c_client *client,
 		}
 	}
 
+	rx8010_rtc_ops.read_alarm = rx8010_read_alarm;
+	rx8010_rtc_ops.set_alarm = rx8010_set_alarm;
+	rx8010_rtc_ops.alarm_irq_enable = rx8010_alarm_irq_enable;
+
+	device_init_wakeup(&client->dev, 1);
+
 	rx8010->rtc = devm_rtc_device_register(&client->dev, client->name,
-		&rx8010_rtc_ops, THIS_MODULE);
+			&rx8010_rtc_ops, THIS_MODULE);
 
 	if (IS_ERR(rx8010->rtc)) {
 		dev_err(&client->dev, "unable to register the class device\n");
@@ -486,6 +506,18 @@ static int rx8010_probe(struct i2c_client *client,
 
 	rx8010->rtc->max_user_freq = 1;
 
+	/*test*/
+	year = i2c_smbus_read_byte_data(client, RX8010_YEAR);
+	dev_err(&client->dev, "The RTC year is %x\n", year);
+	if (year >= 57 ){
+		dev_err(&client->dev, "The RTC year is too large, reset it as 00\n");
+		year = 0;
+		err = i2c_smbus_write_byte_data(client, RX8010_YEAR, year);
+		if (err < 0)
+			return err;
+	}
+
+
 	return err;
 }
 
@@ -494,8 +526,8 @@ static struct i2c_driver rx8010_driver = {
 		.name = "rtc-rx8010",
 		.of_match_table = of_match_ptr(rx8010_of_match),
 	},
-	.probe		= rx8010_probe,
-	.id_table	= rx8010_id,
+	.probe      = rx8010_probe,
+	.id_table   = rx8010_id,
 };
 
 module_i2c_driver(rx8010_driver);
